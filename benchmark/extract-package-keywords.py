'''
Extract the keywords (commands, functions) defined by each package
So we can then use them when searching do-files to create
the requirements.txt file

Notes:

- This uses the output of `ado-to-pkg.py`
- Which in turn uses the the zipfiles generated by `download-ssc.py`
- Need to deal with package dependencies such as ppmlhdfe->reghdfe->ftools
- Need to deal with regress_p and similar cases
'''

import csv
import zipfile
from pathlib import Path


def get_extension(fn):
    return fn.split('.')[-1].lower() if '.' in fn else ''


def get_keyword(fn, ext):
    name = fn.split('.')[0]
    
    if ext == 'ado' and name.startswith('_g'):
        # In calls such as egen varname = function(), function's filename is _gfunction.ado
        keyword = name[2:]
    elif ext == 'ado':
        keyword = name
    elif ext == 'scheme' and name.startswith('scheme-'):
        # See "help scheme files"
        keyword = name[7:]
    else:
        raise Exception

    return keyword


def save_csv(filename, header, data, encoding='utf8', debug=True, strict=False):
    if debug:
        print(f'Saving CSV: {filename}')
    if strict:
        assert len(header) == len(data[0])
    with filename.open(mode='w', newline='', encoding=encoding) as f:
        writer = csv.writer(f, delimiter='\t', quoting=csv.QUOTE_MINIMAL)
        writer.writerow(header)
        writer.writerows(data)

def main():

    input_fn = Path('./journal-counts/ado2pkg.tsv')
    output_fn = Path('./package-keywords.tsv')


    # Read TSV file generated by "ado-to-pkg.py"
    print('- Reading input file')
    with input_fn.open(mode='r', encoding='utf8') as fh:
        reader = csv.reader(fh, delimiter='\t')
        header = next(reader)
        assert header == ['pkg', 'file']
        data = [[pkg, fn] for pkg, fn in reader]

    # Remove 'stata.toc' files
    data = [[pkg, fn] for pkg, fn in data if fn!='stata.toc']

    # Add extension column
    data = [[pkg, fn, get_extension(fn)] for pkg, fn in data]

    # Keep only relevant extensions
    # Ignoring style b/c users are extremely unlikely to use a style without a scheme
    # Ignoring mlib and mata because we are not yet sure how to handle them
    valid_extensions = set(('ado', 'scheme')) #, 'style', 'mlib', 'mata'))
    data = [[pkg, fn, ext] for pkg, fn, ext in data if ext in valid_extensions]

    # Construct keywords
    data = [[pkg, fn, ext, get_keyword(fn, ext)] for pkg, fn, ext in data]

    #for row in data:
    #    print(row)

    # Verify files are unique
    fns = [fn for pkg, fn, ext, keyword in data]
    print(f'  There are {len(fns):,} files, and {len(set(fns)):,} are unique')
    #print(len(fns) == len(set(fns)), len(fns), len(set(fns)))
    #assert len(fns) == len(set(fns))

    # Export results
    header = ['package', 'filename', 'extension', 'keyword']
    save_csv(output_fn, header, data)



if __name__ == '__main__':
    main()


'''
import delimited "C:\Git\stata-require\benchmark\package-keywords.tsv", varnames(1) clear 
bys keyword: gen N = _N
tab N
'''